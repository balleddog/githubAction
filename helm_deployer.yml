---
- block:
    - name: Get github workspace
      set_fact:
        github_workspace: "{{ lookup('env','GITHUB_WORKSPACE') }}"
    - name: Get the chart name
      shell: echo $(basename {{ chart_path }} )
      args:
        executable: /bin/bash
      register: name
    
    - name: Install tiller
      shell: helm init
      args:
        executable: /bin/bash
      
    - name: Wait until tiller is installed
      shell: helm version
      register: status
      until: "'Server' in status.stdout"
      delay: 5
      retries: 120
    
    
    - name: Authorization the tiller to deploy application
      shell: | 
        kubectl create serviceaccount --namespace kube-system tiller 
        kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
      args:
        executable: /bin/bash
    
    - name: Wait until tiller is installed
      shell: kubectl get pod -n kube-system | grep tiller-deploy 
      register: status
      until: "'1/1' in status.stdout"
      delay: 5
      retries: 120
    
    - name: Wait until tiller is installed
      shell: kubectl get pod -n kube-system | grep tiller-deploy 
      register: status
      until: "'Running' in status.stdout"
      delay: 5
      retries: 120
    
    - name: Get tiller pod
      shell: kubectl get pod -n kube-system
      args:
        executable: /bin/bash

      
- block:
    - name: Create namespace
      shell: kubectl create ns mysql-operator
      args:
        executable: /bin/bash
      
    - name: Deploy the application to the cluster.
      shell: helm install {{ github_workspace }}/{{ chart_path }} --name {{ name.stdout }}
      args:
        executable: /bin/bash
         
    - name: Check if the application has been deployed
      shell: helm list
      args:
        executable: /bin/bash
    
    - name: Get all pods
      shell: kubectl get pods --all-namespaces
      args:
        executable: /bin/bash

      
  when: action == "deploy"
    
    
- block:
    - name: Delete the deplyed application
      shell: helm del --purge {{ name.stdout }}
      args:
        executable: /bin/bash
  when: action == "delete"
        
    
    